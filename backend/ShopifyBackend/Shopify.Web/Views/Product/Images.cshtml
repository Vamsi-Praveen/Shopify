@{
    ViewData["Title"] = "Product Images";
}

<div class="p-4 flex flex-col gap-4">
    <div>
        <h1 class="text-2xl font-semibold text-gray-800">Product Images</h1>
        <p class="text-sm text-gray-500">Add images to product</p>
    </div>
    <div class="bg-white p-4 pl-6 border border-gray-200 rounded-[5px] shadow-sm w-1/2">
        <div class="space-y-5">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                <input type="text" placeholder="e.g. Dairymilk" id="productName" autocomplete="off" spellcheck="false"
                       class="w-full px-3 py-2 border border-gray-200 rounded-sm outline-none" />
                <span class="text-red-500 text-sm"></span>
                <div>
                    <ul id="suggestion" class="bg-gray-100"></ul>
                </div>
            </div>
            <div class="flex justify-end">
                <button
                    onclick="getImages()"
                        class="bg-emerald-600 hover:bg-emerald-700 transition text-white rounded-sm px-4 py-2 cursor-pointer flex items-center gap-3">
                    <i class="ph ph-swap text-lg"></i>
                    Get Images
                </button>
            </div>
        </div>
    </div>
    <div class="bg-white p-4 pl-6 border-bottom border-gray-200 rounded-[5px] shadow-sm hidden flex flex-wrap gap-4" id="image-container"></div>
</div>
<script>
    let selectedProductId = null;
    const imageContainer = document.getElementById("image-container");
    document.addEventListener("DOMContentLoaded",()=>{
        const productInput = document.getElementById("productName");
        const suggestionBox = document.getElementById("suggestion");

        function debounce(fn, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => fn.apply(this, args), delay);
            };
        }

        async function fetchMatchingProducts(query) {
            if (query.length < 2){
                suggestionBox.innerHTML = ''
            }

            try {
                const response = await fetch(`/Product/SearchProduct?productName=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error("Network error");

                const products = await response.json();
                 suggestionBox.innerHTML = '';
                if (products.length > 0) {
                    products.forEach(product => {
                        const li = document.createElement("li");
                        li.textContent = product.name || product.Name;
                        li.className = "px-3 py-2 hover:bg-gray-200 cursor-pointer text-sm text-gray-700";
                        li.addEventListener("click", () => {
                            productInput.value = li.textContent;
                            selectedProductId = product.id;
                            suggestionBox.innerHTML = '';
                        });
                        suggestionBox.appendChild(li);
                    });
                }
                else if(query.length>1){
                     const li = document.createElement("li");
                     li.textContent = "No Products Found";
                     li.className = "px-3 py-2 hover:bg-gray-200 cursor-pointer text-sm text-gray-700";
                     suggestionBox.appendChild(li);
                }
                
            } catch (error) {
                console.error("Error fetching products:", error);
            }
        }

        productInput.addEventListener("input", debounce((e) => {
            const query = e.target.value.trim();
            if(query.length){
                fetchMatchingProducts(query);
            }else{
                suggestionBox.innerHTML = '';
            }
        }, 300));

    })
    async function getImages(){
        try{
            const response = await fetch(`/Product/GetProductImages?productId=${encodeURIComponent(selectedProductId)}`);
            if (!response.ok) throw new Error("Network error");

            const productImages = await response.json();

            if(productImages.length>0){
                productImages.map((img)=>{
                    const imgEl = document.createElement("img");
                    const div = document.createElement("div");
                    div.className = "w-50 h-50 p-2 border border-gray-200 rounded-sm shadow-sm relative";
                    const innerDiv = document.createElement("div");
                    innerDiv.className = "absolute rounded-full bg-gray-500 w-5 h-5 top-2 right-2 z-10 flex items-center justify-center cursor-pointer";
                    innerDiv.addEventListener("click",()=>{
                        deleteImage(img.id);
                    })
                    innerDiv.innerHTML = "<i class='ph-bold ph-x text-white text-sm'></i>"
                    imgEl.src = img.imageURL;
                    imgEl.className = "w-full h-full object-contain";
                    div.appendChild(innerDiv);
                    div.appendChild(imgEl);
                    imageContainer.appendChild(div);
                    imageContainer.classList.remove("hidden");
                })
            }
            const addImgDiv = document.createElement("div");
            addImgDiv.className = "w-50 h-50 p-3 border border-dashed border-gray-300 border-2 rounded-sm flex items-center justify-center cursor-pointer bg-gray-100 hover:bg-gray-200";
            addImgDiv.innerHTML = "<i class='ph-bold ph-plus text-4xl'></i>";
            imageContainer.appendChild(addImgDiv);

        }catch(err){
            console.error("Error fetching products:", err);
        }
    }

    async function deleteImage(imageId){
        alert(imageId);
    }

</script>