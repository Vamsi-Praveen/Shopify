@{
    ViewData["Title"] = "Product Images";
}

<div class="p-4 flex flex-col gap-4">
    <div>
        <h1 class="text-2xl font-semibold text-gray-800">Product Images</h1>
        <p class="text-sm text-gray-500">Add images to product</p>
    </div>
    <div class="bg-white p-4 pl-6 border border-gray-200 rounded-[5px] shadow-sm w-1/2">
        <form method="post" class="space-y-5">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                <input type="text" placeholder="e.g. Dairymilk" id="productName"
                       class="w-full px-3 py-2 border border-gray-200 rounded-sm outline-none" />
                <span class="text-red-500 text-sm"></span>
                <div>
                    <ul id="suggestion" class="bg-gray-100"></ul>
                </div>
            </div>
            <div class="flex justify-end">
                <button type="submit"
                        class="bg-emerald-600 hover:bg-emerald-700 transition text-white rounded-sm px-4 py-2 cursor-pointer flex items-center gap-3">
                    <i class="ph ph-swap text-lg"></i>
                    Get Images
                </button>
            </div>
        </form>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded",()=>{
        const productInput = document.getElementById("productName");
        const suggestionBox = document.getElementById("suggestion");

        function debounce(fn, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => fn.apply(this, args), delay);
            };
        }

        async function fetchMatchingProducts(query) {
            if (query.length < 2){
                suggestionBox.innerHTML = ''
            }

            try {
                const response = await fetch(`/Product/SearchProduct?productName=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error("Network error");

                const products = await response.json();
                 suggestionBox.innerHTML = '';
                if (products.length > 0) {
                    products.forEach(product => {
                        const li = document.createElement("li");
                        li.textContent = product.name || product.Name;
                        li.className = "px-3 py-2 hover:bg-gray-200 cursor-pointer text-sm text-gray-700";
                        li.addEventListener("click", () => {
                            productInput.value = li.textContent;
                            suggestionBox.innerHTML = '';
                        });
                        suggestionBox.appendChild(li);
                    });
                }
                
            } catch (error) {
                console.error("Error fetching products:", error);
            }
        }

        productInput.addEventListener("input", debounce((e) => {
            const query = e.target.value.trim();
            fetchMatchingProducts(query);
        }, 100));


    })
</script>